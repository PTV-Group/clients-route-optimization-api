/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RouteReport,
    RouteReportFromJSON,
    RouteReportFromJSONTyped,
    RouteReportToJSON,
} from './RouteReport';
import {
    Stop,
    StopFromJSON,
    StopFromJSONTyped,
    StopToJSON,
} from './Stop';

/**
 * A route contains a sequence of stops. It specifies where and in which order goods are to be picked up or delivered. Each stop can be assigned to a trip. A route is subdivided into trips. Each route has at least one trip and a trip consists of at least two stops. At the beginning and end of each trip the vehicle does not carry any load. A trip starts at the vehicle start location or at a depot location, and ends at the vehicle end location or at a depot location. 
 * 
 * See [here](./concepts/routes-and-trips) for more information.
 * @export
 * @interface Route
 */
export interface Route {
    /**
     * The ID of the vehicle that is assigned to this route. A vehicle can be assigned to one route at most.
     * @type {string}
     * @memberof Route
     */
    vehicleId: string;
    /**
     * A sequence of stops along this route. Each stop is at a specific location, either a customer location or a depot location. At a customer location, transports are scheduled in order of their type: deliveries before pickups. The sequence of deliveries and pickups is always sorted by Last In - First Out (LIFO). At a depot location a stop groups either deliveries or pickups.
     * 
     * See [here](./concepts/locations-transports-and-stops) for more information.
     * @type {Array<Stop>}
     * @memberof Route
     */
    stops: Array<Stop>;
    /**
     * Returns a summary of all events and all reports that belong to this route, including the start time and the end time of the route.
     * @type {RouteReport}
     * @memberof Route
     */
    readonly report: RouteReport | null;
}

export function RouteFromJSON(json: any): Route {
    return RouteFromJSONTyped(json, false);
}

export function RouteFromJSONTyped(json: any, ignoreDiscriminator: boolean): Route {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'vehicleId': json['vehicleId'],
        'stops': ((json['stops'] as Array<any>).map(StopFromJSON)),
        'report': RouteReportFromJSON(json['report']),
    };
}

export function RouteToJSON(value?: Route | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'vehicleId': value.vehicleId,
        'stops': ((value.stops as Array<any>).map(StopToJSON)),
    };
}

