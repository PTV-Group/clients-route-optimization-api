/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MixedLoadingProhibition,
    MixedLoadingProhibitionFromJSON,
    MixedLoadingProhibitionFromJSONTyped,
    MixedLoadingProhibitionToJSON,
} from './MixedLoadingProhibition';

/**
 * Planning restrictions that must hold for all routes.
 * @export
 * @interface PlanningRestrictions
 */
export interface PlanningRestrictions {
    /**
     * Restricts the number of trips per route to one.
     * 
     * See [here](./concepts/route-structure-control) for more information.
     * @type {boolean}
     * @memberof PlanningRestrictions
     */
    singleTripPerRoute?: boolean;
    /**
     * Restricts the number of different depot locations in the route of a vehicle to at most one. The vehicle start and end locations do not count here.
     * 
     * See [here](./concepts/route-structure-control) for more information.
     * @type {boolean}
     * @memberof PlanningRestrictions
     */
    singleDepotPerRoute?: boolean;
    /**
     * Defines restrictions regarding which load categories of transports are disallowed to be mixed on the same trip. 
     * @type {Array<MixedLoadingProhibition>}
     * @memberof PlanningRestrictions
     */
    mixedLoadingProhibitions?: Array<MixedLoadingProhibition>;
}

export function PlanningRestrictionsFromJSON(json: any): PlanningRestrictions {
    return PlanningRestrictionsFromJSONTyped(json, false);
}

export function PlanningRestrictionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlanningRestrictions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'singleTripPerRoute': !exists(json, 'singleTripPerRoute') ? undefined : json['singleTripPerRoute'],
        'singleDepotPerRoute': !exists(json, 'singleDepotPerRoute') ? undefined : json['singleDepotPerRoute'],
        'mixedLoadingProhibitions': !exists(json, 'mixedLoadingProhibitions') ? undefined : ((json['mixedLoadingProhibitions'] as Array<any>).map(MixedLoadingProhibitionFromJSON)),
    };
}

export function PlanningRestrictionsToJSON(value?: PlanningRestrictions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'singleTripPerRoute': value.singleTripPerRoute,
        'singleDepotPerRoute': value.singleDepotPerRoute,
        'mixedLoadingProhibitions': value.mixedLoadingProhibitions === undefined ? undefined : ((value.mixedLoadingProhibitions as Array<any>).map(MixedLoadingProhibitionToJSON)),
    };
}

