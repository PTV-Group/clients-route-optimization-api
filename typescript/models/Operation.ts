/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseFromJSONTyped,
    ErrorResponseToJSON,
} from './ErrorResponse';
import {
    OperationStatus,
    OperationStatusFromJSON,
    OperationStatusFromJSONTyped,
    OperationStatusToJSON,
} from './OperationStatus';

/**
 * Information about an operation.
 * @export
 * @interface Operation
 */
export interface Operation {
    /**
     * The name of the operation, possible values: "optimization", "evaluation".
     * @type {string}
     * @memberof Operation
     */
    name: string;
    /**
     * 
     * @type {OperationStatus}
     * @memberof Operation
     */
    status: OperationStatus;
    /**
     * The start time of the operation formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339), by means the client can decide to delete the operation. The value is always returned in UTC time.
     * @type {Date}
     * @memberof Operation
     */
    startTime: Date;
    /**
     * The elapsed time of the operation [s], by means the client can decide to delete the operation. It represents the duration from the start time until now when the operation is still active or from the start time until the end of operation when this operation is already completed.
     * @type {number}
     * @memberof Operation
     */
    elapsedTime: number;
    /**
     * 
     * @type {ErrorResponse}
     * @memberof Operation
     */
    error?: ErrorResponse;
}

export function OperationFromJSON(json: any): Operation {
    return OperationFromJSONTyped(json, false);
}

export function OperationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Operation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'status': OperationStatusFromJSON(json['status']),
        'startTime': (new Date(json['startTime'])),
        'elapsedTime': json['elapsedTime'],
        'error': !exists(json, 'error') ? undefined : ErrorResponseFromJSON(json['error']),
    };
}

export function OperationToJSON(value?: Operation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'status': OperationStatusToJSON(value.status),
        'startTime': (value.startTime.toISOString()),
        'elapsedTime': value.elapsedTime,
        'error': ErrorResponseToJSON(value.error),
    };
}

