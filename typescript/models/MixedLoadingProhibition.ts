/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * There may be some transports that shall not be mixed with some other transports on one trip. For instance, it may be prohibited to load certain dangerous goods together on the same trip, such as flammable solids on the one hand and explosive substances on the other hand. A mixed loading prohibition is a pair of two conflicting load categories that prohibits transports with these load categories to be mixed on the same trip. The load category can be specified for every transport. For a vehicle, there is a flag that lets the vehicle ignore this restriction.
 * 
 * See [here](./concepts/mixed-loading-prohibition) for more information.
 * @export
 * @interface MixedLoadingProhibition
 */
export interface MixedLoadingProhibition {
    /**
     * A transport with this load category is not allowed to be on the same trip as a transport with load category conflictingLoadCategory2. The load category can be any string but it must not be empty and not the same as conflictingLoadCategory2.
     * @type {string}
     * @memberof MixedLoadingProhibition
     */
    conflictingLoadCategory1: string;
    /**
     * A transport with this load category is not allowed to be on the same trip as a transport with load category conflictingLoadCategory1. The load category can be any string but it must not be empty and not the same as conflictingLoadCategory1.
     * @type {string}
     * @memberof MixedLoadingProhibition
     */
    conflictingLoadCategory2: string;
}

export function MixedLoadingProhibitionFromJSON(json: any): MixedLoadingProhibition {
    return MixedLoadingProhibitionFromJSONTyped(json, false);
}

export function MixedLoadingProhibitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): MixedLoadingProhibition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'conflictingLoadCategory1': json['conflictingLoadCategory1'],
        'conflictingLoadCategory2': json['conflictingLoadCategory2'],
    };
}

export function MixedLoadingProhibitionToJSON(value?: MixedLoadingProhibition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'conflictingLoadCategory1': value.conflictingLoadCategory1,
        'conflictingLoadCategory2': value.conflictingLoadCategory2,
    };
}

