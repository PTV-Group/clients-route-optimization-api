/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CapacitiesChangePosition,
    CapacitiesChangePositionFromJSON,
    CapacitiesChangePositionFromJSONTyped,
    CapacitiesChangePositionToJSON,
} from './CapacitiesChangePosition';

/**
 * A vehicle that is used to transport goods.
 * @export
 * @interface Vehicle
 */
export interface Vehicle {
    /**
     * A unique ID across all vehicles. For multiple identical plans the optimized routes will always be the same. But please be aware that different IDs can lead to different results.
     * @type {string}
     * @memberof Vehicle
     */
    id: string;
    /**
     * List of capacities for the different quantity dimensions of goods that can be transported. The maximum length of this list is 100. That is, up to 100 different quantity dimensions (e.g. number of pallets, weight, volume, etc.) can be distinguished. Transports can only be executed by a vehicle with a higher (or an equal) maximum capacity in every quantity dimension. The length of this list has to be the same for all transports and all vehicles. If and only if this list of capacities is empty for all vehicles, the quantities of each transport must be empty.
     * @type {Array<number>}
     * @memberof Vehicle
     */
    capacities?: Array<number>;
    /**
     * List of alternative capacities. Each entry in this array must be valid capacities, more details are described in **capacities**. If a route cannot be driven with the **capacities**, alternative capacities may be chosen by the optimization considering the chosen **capacitiesChangePosition**.
     * 
     * See [here](./concepts/capacities-and-alternative-capacities) for more information.
     * @type {Array<Array<number>>}
     * @memberof Vehicle
     */
    alternativeCapacities?: Array<Array<number>>;
    /**
     * 
     * @type {CapacitiesChangePosition}
     * @memberof Vehicle
     */
    capacitiesChangePosition?: CapacitiesChangePosition;
    /**
     * List of vehicle equipment. A transport can only be served by the vehicle if this list is a superset of (or equal to) the transport's required vehicle equipment.
     * @type {Array<string>}
     * @memberof Vehicle
     */
    equipment?: Array<string>;
    /**
     * The profile defines attributes of the vehicle relevant to determine travel times and distances between any two locations. Default profile is _EUR_TRAILER_TRUCK_. See [here](./concepts/profiles-and-countries) for a complete list of allowed values.
     * @type {string}
     * @memberof Vehicle
     */
    profile?: string;
    /**
     * ID of the vehicle's start location. If the vehicle start location does not coincide with the location of the first pickup, only the coordinates of the vehicle start location are considered and all other attributes such as opening intervals, service time or type are ignored. If no start location is specified, it is assumed that the vehicle is available at the first stop.
     * @type {string}
     * @memberof Vehicle
     */
    startLocationId?: string;
    /**
     * ID of the vehicle's end location. If the vehicle end location does not coincide with the location of the last delivery, only the coordinates of the vehicle end location are considered and all other attributes such as opening intervals, service time or type are ignored. If no end location is specified, it is assumed that the vehicle remains at the last stop.
     * @type {string}
     * @memberof Vehicle
     */
    endLocationId?: string;
    /**
     * Indicates whether the mixed loading prohibitions are relevant for this vehicle. If set to false, the mixed loading prohibitions -- if there are any -- must be respected on every trip of the vehicle. If set to true, the mixed loading prohibitions are ignored by the vehicle.
     * @type {boolean}
     * @memberof Vehicle
     */
    ignoreMixedLoadingProhibitions?: boolean;
}

export function VehicleFromJSON(json: any): Vehicle {
    return VehicleFromJSONTyped(json, false);
}

export function VehicleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Vehicle {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'capacities': !exists(json, 'capacities') ? undefined : json['capacities'],
        'alternativeCapacities': !exists(json, 'alternativeCapacities') ? undefined : json['alternativeCapacities'],
        'capacitiesChangePosition': !exists(json, 'capacitiesChangePosition') ? undefined : CapacitiesChangePositionFromJSON(json['capacitiesChangePosition']),
        'equipment': !exists(json, 'equipment') ? undefined : json['equipment'],
        'profile': !exists(json, 'profile') ? undefined : json['profile'],
        'startLocationId': !exists(json, 'startLocationId') ? undefined : json['startLocationId'],
        'endLocationId': !exists(json, 'endLocationId') ? undefined : json['endLocationId'],
        'ignoreMixedLoadingProhibitions': !exists(json, 'ignoreMixedLoadingProhibitions') ? undefined : json['ignoreMixedLoadingProhibitions'],
    };
}

export function VehicleToJSON(value?: Vehicle | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'capacities': value.capacities,
        'alternativeCapacities': value.alternativeCapacities,
        'capacitiesChangePosition': CapacitiesChangePositionToJSON(value.capacitiesChangePosition),
        'equipment': value.equipment,
        'profile': value.profile,
        'startLocationId': value.startLocationId,
        'endLocationId': value.endLocationId,
        'ignoreMixedLoadingProhibitions': value.ignoreMixedLoadingProhibitions,
    };
}

