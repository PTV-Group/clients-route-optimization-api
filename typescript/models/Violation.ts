/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MixedLoadingProhibition,
    MixedLoadingProhibitionFromJSON,
    MixedLoadingProhibitionFromJSONTyped,
    MixedLoadingProhibitionToJSON,
} from './MixedLoadingProhibition';
import {
    ViolationType,
    ViolationTypeFromJSON,
    ViolationTypeFromJSONTyped,
    ViolationTypeToJSON,
} from './ViolationType';

/**
 * Specifies a violation of a route.
 * @export
 * @interface Violation
 */
export interface Violation {
    /**
     * 
     * @type {ViolationType}
     * @memberof Violation
     */
    type: ViolationType;
    /**
     * Specifies a violation that involves a time limit: Time by which the limit is exceeded. Is only filled for the following violation types: _PLANNING_HORIZON_, _DRIVER_AVAILABILITY_, _OPENING_INTERVAL_, _MAXIMUM_TRAVEL_TIME_OF_DRIVER_, _MAXIMUM_DRIVING_TIME_OF_DRIVER_.
     * @type {number}
     * @memberof Violation
     */
    timeExceedance?: number;
    /**
     * Specifies a violation of the capacities of the used vehicle: Exceedance of the capacity in each quantity dimension of goods. Is only filled for the following violation type: _VEHICLE_CAPACITY_.
     * @type {Array<number>}
     * @memberof Violation
     */
    capacityExceedance?: Array<number>;
    /**
     * Specifies a violation for missing equipment (e.g. missing equipment of the used vehicle) that is required by the transports of the route. Is only filled for the following violation type: _VEHICLE_EQUIPMENT_.
     * @type {Array<string>}
     * @memberof Violation
     */
    missingEquipment?: Array<string>;
    /**
     * Is only filled for the following violation type: _MIXED_LOADING_PROHIBITION_.
     * @type {Array<MixedLoadingProhibition>}
     * @memberof Violation
     */
    mixedLoadingProhibitions?: Array<MixedLoadingProhibition>;
}

export function ViolationFromJSON(json: any): Violation {
    return ViolationFromJSONTyped(json, false);
}

export function ViolationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Violation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': ViolationTypeFromJSON(json['type']),
        'timeExceedance': !exists(json, 'timeExceedance') ? undefined : json['timeExceedance'],
        'capacityExceedance': !exists(json, 'capacityExceedance') ? undefined : json['capacityExceedance'],
        'missingEquipment': !exists(json, 'missingEquipment') ? undefined : json['missingEquipment'],
        'mixedLoadingProhibitions': !exists(json, 'mixedLoadingProhibitions') ? undefined : ((json['mixedLoadingProhibitions'] as Array<any>).map(MixedLoadingProhibitionFromJSON)),
    };
}

export function ViolationToJSON(value?: Violation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': ViolationTypeToJSON(value.type),
        'timeExceedance': value.timeExceedance,
        'capacityExceedance': value.capacityExceedance,
        'missingEquipment': value.missingEquipment,
        'mixedLoadingProhibitions': value.mixedLoadingProhibitions === undefined ? undefined : ((value.mixedLoadingProhibitions as Array<any>).map(MixedLoadingProhibitionToJSON)),
    };
}

