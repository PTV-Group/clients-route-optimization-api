/*
 * Route Optimization
 *
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.Model
{
    /// <summary>
    /// Attributes for a location of type CUSTOMER.
    /// </summary>
    [DataContract(Name = "CustomerLocationAttributes")]
    public partial class CustomerLocationAttributes : IEquatable<CustomerLocationAttributes>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PositionInTrip
        /// </summary>
        [DataMember(Name = "positionInTrip", EmitDefaultValue = true)]
        public PositionInTrip? PositionInTrip { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerLocationAttributes" /> class.
        /// </summary>
        /// <param name="positionInTrip">positionInTrip.</param>
        /// <param name="tripSectionNumber">If tripSectionNumber is specified, a stop at this customer location will be visited after stops (within the same trip) at customer locations with specified lower tripSectionNumber and before stops (within the same trip) at customer locations with specified higher tripSectionNumber. Consequently, the trip section numbers of stops at customer locations must be non-decreasing within each trip.   If specified, positionInTrip must not be set for the same location.  See [here](./concepts/trip-sections-and-position-trips) for more information..</param>
        public CustomerLocationAttributes(PositionInTrip? positionInTrip = default(PositionInTrip?), int? tripSectionNumber = default(int?))
        {
            this.PositionInTrip = positionInTrip;
            this.TripSectionNumber = tripSectionNumber;
        }

        /// <summary>
        /// If tripSectionNumber is specified, a stop at this customer location will be visited after stops (within the same trip) at customer locations with specified lower tripSectionNumber and before stops (within the same trip) at customer locations with specified higher tripSectionNumber. Consequently, the trip section numbers of stops at customer locations must be non-decreasing within each trip.   If specified, positionInTrip must not be set for the same location.  See [here](./concepts/trip-sections-and-position-trips) for more information.
        /// </summary>
        /// <value>If tripSectionNumber is specified, a stop at this customer location will be visited after stops (within the same trip) at customer locations with specified lower tripSectionNumber and before stops (within the same trip) at customer locations with specified higher tripSectionNumber. Consequently, the trip section numbers of stops at customer locations must be non-decreasing within each trip.   If specified, positionInTrip must not be set for the same location.  See [here](./concepts/trip-sections-and-position-trips) for more information.</value>
        [DataMember(Name = "tripSectionNumber", EmitDefaultValue = true)]
        public int? TripSectionNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerLocationAttributes {\n");
            sb.Append("  PositionInTrip: ").Append(PositionInTrip).Append("\n");
            sb.Append("  TripSectionNumber: ").Append(TripSectionNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerLocationAttributes);
        }

        /// <summary>
        /// Returns true if CustomerLocationAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerLocationAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerLocationAttributes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PositionInTrip == input.PositionInTrip ||
                    this.PositionInTrip.Equals(input.PositionInTrip)
                ) && 
                (
                    this.TripSectionNumber == input.TripSectionNumber ||
                    (this.TripSectionNumber != null &&
                    this.TripSectionNumber.Equals(input.TripSectionNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PositionInTrip.GetHashCode();
                if (this.TripSectionNumber != null)
                {
                    hashCode = (hashCode * 59) + this.TripSectionNumber.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // TripSectionNumber (int?) minimum
            if (this.TripSectionNumber < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TripSectionNumber, must be a value greater than or equal to 1.", new [] { "TripSectionNumber" });
            }

            yield break;
        }
    }

}
