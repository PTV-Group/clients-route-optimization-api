/*
 * Route Optimization
 *
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.8
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.Model
{
    /// <summary>
    /// A vehicle that is used to transport goods.
    /// </summary>
    [DataContract(Name = "Vehicle")]
    public partial class Vehicle : IEquatable<Vehicle>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets CapacitiesChangePosition
        /// </summary>
        [DataMember(Name = "capacitiesChangePosition", EmitDefaultValue = false)]
        public CapacitiesChangePosition? CapacitiesChangePosition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Vehicle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Vehicle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Vehicle" /> class.
        /// </summary>
        /// <param name="id">A unique ID across all vehicles. For multiple identical plans the optimized routes will always be the same. But please be aware that different IDs can lead to different results. (required).</param>
        /// <param name="capacities">List of capacities for the different quantity dimensions of goods that can be transported. The maximum length of this list is 100. That is, up to 100 different quantity dimensions (e.g. number of pallets, weight, volume, etc.) can be distinguished. Transports can only be executed by a vehicle with a higher (or an equal) maximum capacity in every quantity dimension. The length of this list has to be the same for all transports and all vehicles. If and only if this list of capacities is empty for all vehicles, the quantities of each transport must be empty..</param>
        /// <param name="alternativeCapacities">List of alternative capacities. Each entry in this array must be valid capacities, more details are described in **capacities**. If a route cannot be driven with the **capacities**, alternative capacities may be chosen by the optimization considering the chosen **capacitiesChangePosition**.  See [here](./concepts/capacities-and-alternative-capacities) for more information..</param>
        /// <param name="capacitiesChangePosition">capacitiesChangePosition.</param>
        /// <param name="equipment">List of vehicle equipment. A transport can only be served by the vehicle if this list is a superset of (or equal to) the transport&#39;s required vehicle equipment..</param>
        /// <param name="profile">The profile defines attributes of the vehicle relevant to determine travel times and distances between any two locations. Default profile is _EUR_TRAILER_TRUCK_. See [here](./concepts/profiles-and-countries) for a complete list of allowed values. (default to &quot;EUR_TRAILER_TRUCK&quot;).</param>
        /// <param name="startLocationId">ID of the vehicle&#39;s start location. If the vehicle start location does not coincide with the location of the first pickup, only the coordinates of the vehicle start location are considered and all other attributes such as opening intervals, service time or type are ignored. If no start location is specified, it is assumed that the vehicle is available at the first stop..</param>
        /// <param name="endLocationId">ID of the vehicle&#39;s end location. If the vehicle end location does not coincide with the location of the last delivery, only the coordinates of the vehicle end location are considered and all other attributes such as opening intervals, service time or type are ignored. If no end location is specified, it is assumed that the vehicle remains at the last stop..</param>
        /// <param name="serviceTimePerTransportStop">Vehicle-dependent service time [s], for example, for maneuvering. This service time is taken into account for each stop served by this vehicle to pick up or deliver goods. Besides a vehicle-dependent service time, the user may specify location- and transport-dependent service times at the locations and the transports respectively. (default to 0).</param>
        /// <param name="serviceTimeFactor">A factor that scales transport-dependent service times of all transport-related service actions, for example, if loading and unloading is more or less complicated than for other vehicles. A factor less than one means that the vehicle speeds up the service, a factor greater than one means that it slows the service down. (default to 1D).</param>
        /// <param name="ignoreMixedLoadingProhibitions">Indicates whether the mixed loading prohibitions are relevant for this vehicle. If set to false, the mixed loading prohibitions - - if there are any - - must be respected on every trip of the vehicle. If set to true, the mixed loading prohibitions are ignored by the vehicle. (default to false).</param>
        public Vehicle(string id = default(string), List<int> capacities = default(List<int>), List<List<int>> alternativeCapacities = default(List<List<int>>), CapacitiesChangePosition? capacitiesChangePosition = default(CapacitiesChangePosition?), List<string> equipment = default(List<string>), string profile = "EUR_TRAILER_TRUCK", string startLocationId = default(string), string endLocationId = default(string), int serviceTimePerTransportStop = 0, double serviceTimeFactor = 1D, bool ignoreMixedLoadingProhibitions = false)
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for Vehicle and cannot be null");
            }
            this.Id = id;
            this.Capacities = capacities;
            this.AlternativeCapacities = alternativeCapacities;
            this.CapacitiesChangePosition = capacitiesChangePosition;
            this.Equipment = equipment;
            // use default value if no "profile" provided
            this.Profile = profile ?? "EUR_TRAILER_TRUCK";
            this.StartLocationId = startLocationId;
            this.EndLocationId = endLocationId;
            this.ServiceTimePerTransportStop = serviceTimePerTransportStop;
            this.ServiceTimeFactor = serviceTimeFactor;
            this.IgnoreMixedLoadingProhibitions = ignoreMixedLoadingProhibitions;
        }

        /// <summary>
        /// A unique ID across all vehicles. For multiple identical plans the optimized routes will always be the same. But please be aware that different IDs can lead to different results.
        /// </summary>
        /// <value>A unique ID across all vehicles. For multiple identical plans the optimized routes will always be the same. But please be aware that different IDs can lead to different results.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// List of capacities for the different quantity dimensions of goods that can be transported. The maximum length of this list is 100. That is, up to 100 different quantity dimensions (e.g. number of pallets, weight, volume, etc.) can be distinguished. Transports can only be executed by a vehicle with a higher (or an equal) maximum capacity in every quantity dimension. The length of this list has to be the same for all transports and all vehicles. If and only if this list of capacities is empty for all vehicles, the quantities of each transport must be empty.
        /// </summary>
        /// <value>List of capacities for the different quantity dimensions of goods that can be transported. The maximum length of this list is 100. That is, up to 100 different quantity dimensions (e.g. number of pallets, weight, volume, etc.) can be distinguished. Transports can only be executed by a vehicle with a higher (or an equal) maximum capacity in every quantity dimension. The length of this list has to be the same for all transports and all vehicles. If and only if this list of capacities is empty for all vehicles, the quantities of each transport must be empty.</value>
        [DataMember(Name = "capacities", EmitDefaultValue = false)]
        public List<int> Capacities { get; set; }

        /// <summary>
        /// List of alternative capacities. Each entry in this array must be valid capacities, more details are described in **capacities**. If a route cannot be driven with the **capacities**, alternative capacities may be chosen by the optimization considering the chosen **capacitiesChangePosition**.  See [here](./concepts/capacities-and-alternative-capacities) for more information.
        /// </summary>
        /// <value>List of alternative capacities. Each entry in this array must be valid capacities, more details are described in **capacities**. If a route cannot be driven with the **capacities**, alternative capacities may be chosen by the optimization considering the chosen **capacitiesChangePosition**.  See [here](./concepts/capacities-and-alternative-capacities) for more information.</value>
        [DataMember(Name = "alternativeCapacities", EmitDefaultValue = false)]
        public List<List<int>> AlternativeCapacities { get; set; }

        /// <summary>
        /// List of vehicle equipment. A transport can only be served by the vehicle if this list is a superset of (or equal to) the transport&#39;s required vehicle equipment.
        /// </summary>
        /// <value>List of vehicle equipment. A transport can only be served by the vehicle if this list is a superset of (or equal to) the transport&#39;s required vehicle equipment.</value>
        [DataMember(Name = "equipment", EmitDefaultValue = false)]
        public List<string> Equipment { get; set; }

        /// <summary>
        /// The profile defines attributes of the vehicle relevant to determine travel times and distances between any two locations. Default profile is _EUR_TRAILER_TRUCK_. See [here](./concepts/profiles-and-countries) for a complete list of allowed values.
        /// </summary>
        /// <value>The profile defines attributes of the vehicle relevant to determine travel times and distances between any two locations. Default profile is _EUR_TRAILER_TRUCK_. See [here](./concepts/profiles-and-countries) for a complete list of allowed values.</value>
        [DataMember(Name = "profile", EmitDefaultValue = false)]
        public string Profile { get; set; }

        /// <summary>
        /// ID of the vehicle&#39;s start location. If the vehicle start location does not coincide with the location of the first pickup, only the coordinates of the vehicle start location are considered and all other attributes such as opening intervals, service time or type are ignored. If no start location is specified, it is assumed that the vehicle is available at the first stop.
        /// </summary>
        /// <value>ID of the vehicle&#39;s start location. If the vehicle start location does not coincide with the location of the first pickup, only the coordinates of the vehicle start location are considered and all other attributes such as opening intervals, service time or type are ignored. If no start location is specified, it is assumed that the vehicle is available at the first stop.</value>
        [DataMember(Name = "startLocationId", EmitDefaultValue = false)]
        public string StartLocationId { get; set; }

        /// <summary>
        /// ID of the vehicle&#39;s end location. If the vehicle end location does not coincide with the location of the last delivery, only the coordinates of the vehicle end location are considered and all other attributes such as opening intervals, service time or type are ignored. If no end location is specified, it is assumed that the vehicle remains at the last stop.
        /// </summary>
        /// <value>ID of the vehicle&#39;s end location. If the vehicle end location does not coincide with the location of the last delivery, only the coordinates of the vehicle end location are considered and all other attributes such as opening intervals, service time or type are ignored. If no end location is specified, it is assumed that the vehicle remains at the last stop.</value>
        [DataMember(Name = "endLocationId", EmitDefaultValue = false)]
        public string EndLocationId { get; set; }

        /// <summary>
        /// Vehicle-dependent service time [s], for example, for maneuvering. This service time is taken into account for each stop served by this vehicle to pick up or deliver goods. Besides a vehicle-dependent service time, the user may specify location- and transport-dependent service times at the locations and the transports respectively.
        /// </summary>
        /// <value>Vehicle-dependent service time [s], for example, for maneuvering. This service time is taken into account for each stop served by this vehicle to pick up or deliver goods. Besides a vehicle-dependent service time, the user may specify location- and transport-dependent service times at the locations and the transports respectively.</value>
        [DataMember(Name = "serviceTimePerTransportStop", EmitDefaultValue = false)]
        public int ServiceTimePerTransportStop { get; set; }

        /// <summary>
        /// A factor that scales transport-dependent service times of all transport-related service actions, for example, if loading and unloading is more or less complicated than for other vehicles. A factor less than one means that the vehicle speeds up the service, a factor greater than one means that it slows the service down.
        /// </summary>
        /// <value>A factor that scales transport-dependent service times of all transport-related service actions, for example, if loading and unloading is more or less complicated than for other vehicles. A factor less than one means that the vehicle speeds up the service, a factor greater than one means that it slows the service down.</value>
        [DataMember(Name = "serviceTimeFactor", EmitDefaultValue = false)]
        public double ServiceTimeFactor { get; set; }

        /// <summary>
        /// Indicates whether the mixed loading prohibitions are relevant for this vehicle. If set to false, the mixed loading prohibitions - - if there are any - - must be respected on every trip of the vehicle. If set to true, the mixed loading prohibitions are ignored by the vehicle.
        /// </summary>
        /// <value>Indicates whether the mixed loading prohibitions are relevant for this vehicle. If set to false, the mixed loading prohibitions - - if there are any - - must be respected on every trip of the vehicle. If set to true, the mixed loading prohibitions are ignored by the vehicle.</value>
        [DataMember(Name = "ignoreMixedLoadingProhibitions", EmitDefaultValue = true)]
        public bool IgnoreMixedLoadingProhibitions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Vehicle {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Capacities: ").Append(Capacities).Append("\n");
            sb.Append("  AlternativeCapacities: ").Append(AlternativeCapacities).Append("\n");
            sb.Append("  CapacitiesChangePosition: ").Append(CapacitiesChangePosition).Append("\n");
            sb.Append("  Equipment: ").Append(Equipment).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  StartLocationId: ").Append(StartLocationId).Append("\n");
            sb.Append("  EndLocationId: ").Append(EndLocationId).Append("\n");
            sb.Append("  ServiceTimePerTransportStop: ").Append(ServiceTimePerTransportStop).Append("\n");
            sb.Append("  ServiceTimeFactor: ").Append(ServiceTimeFactor).Append("\n");
            sb.Append("  IgnoreMixedLoadingProhibitions: ").Append(IgnoreMixedLoadingProhibitions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Vehicle);
        }

        /// <summary>
        /// Returns true if Vehicle instances are equal
        /// </summary>
        /// <param name="input">Instance of Vehicle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vehicle input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Capacities == input.Capacities ||
                    this.Capacities != null &&
                    input.Capacities != null &&
                    this.Capacities.SequenceEqual(input.Capacities)
                ) && 
                (
                    this.AlternativeCapacities == input.AlternativeCapacities ||
                    this.AlternativeCapacities != null &&
                    input.AlternativeCapacities != null &&
                    this.AlternativeCapacities.SequenceEqual(input.AlternativeCapacities)
                ) && 
                (
                    this.CapacitiesChangePosition == input.CapacitiesChangePosition ||
                    this.CapacitiesChangePosition.Equals(input.CapacitiesChangePosition)
                ) && 
                (
                    this.Equipment == input.Equipment ||
                    this.Equipment != null &&
                    input.Equipment != null &&
                    this.Equipment.SequenceEqual(input.Equipment)
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.StartLocationId == input.StartLocationId ||
                    (this.StartLocationId != null &&
                    this.StartLocationId.Equals(input.StartLocationId))
                ) && 
                (
                    this.EndLocationId == input.EndLocationId ||
                    (this.EndLocationId != null &&
                    this.EndLocationId.Equals(input.EndLocationId))
                ) && 
                (
                    this.ServiceTimePerTransportStop == input.ServiceTimePerTransportStop ||
                    this.ServiceTimePerTransportStop.Equals(input.ServiceTimePerTransportStop)
                ) && 
                (
                    this.ServiceTimeFactor == input.ServiceTimeFactor ||
                    this.ServiceTimeFactor.Equals(input.ServiceTimeFactor)
                ) && 
                (
                    this.IgnoreMixedLoadingProhibitions == input.IgnoreMixedLoadingProhibitions ||
                    this.IgnoreMixedLoadingProhibitions.Equals(input.IgnoreMixedLoadingProhibitions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Capacities != null)
                {
                    hashCode = (hashCode * 59) + this.Capacities.GetHashCode();
                }
                if (this.AlternativeCapacities != null)
                {
                    hashCode = (hashCode * 59) + this.AlternativeCapacities.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CapacitiesChangePosition.GetHashCode();
                if (this.Equipment != null)
                {
                    hashCode = (hashCode * 59) + this.Equipment.GetHashCode();
                }
                if (this.Profile != null)
                {
                    hashCode = (hashCode * 59) + this.Profile.GetHashCode();
                }
                if (this.StartLocationId != null)
                {
                    hashCode = (hashCode * 59) + this.StartLocationId.GetHashCode();
                }
                if (this.EndLocationId != null)
                {
                    hashCode = (hashCode * 59) + this.EndLocationId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ServiceTimePerTransportStop.GetHashCode();
                hashCode = (hashCode * 59) + this.ServiceTimeFactor.GetHashCode();
                hashCode = (hashCode * 59) + this.IgnoreMixedLoadingProhibitions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@".*[^ ].*", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // StartLocationId (string) pattern
            Regex regexStartLocationId = new Regex(@".*[^ ].*", RegexOptions.CultureInvariant);
            if (false == regexStartLocationId.Match(this.StartLocationId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartLocationId, must match a pattern of " + regexStartLocationId, new [] { "StartLocationId" });
            }

            // EndLocationId (string) pattern
            Regex regexEndLocationId = new Regex(@".*[^ ].*", RegexOptions.CultureInvariant);
            if (false == regexEndLocationId.Match(this.EndLocationId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndLocationId, must match a pattern of " + regexEndLocationId, new [] { "EndLocationId" });
            }

            // ServiceTimePerTransportStop (int) minimum
            if (this.ServiceTimePerTransportStop < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServiceTimePerTransportStop, must be a value greater than or equal to 0.", new [] { "ServiceTimePerTransportStop" });
            }

            // ServiceTimeFactor (double) maximum
            if (this.ServiceTimeFactor > (double)10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServiceTimeFactor, must be a value less than or equal to 10.", new [] { "ServiceTimeFactor" });
            }

            // ServiceTimeFactor (double) minimum
            if (this.ServiceTimeFactor < (double)0.1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServiceTimeFactor, must be a value greater than or equal to 0.1.", new [] { "ServiceTimeFactor" });
            }

            yield break;
        }
    }

}
