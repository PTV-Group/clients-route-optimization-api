/*
 * Route Optimization
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A transport is the order to transport goods, that is, to pick them up at one location and deliver them to another location.  See [here](./Concepts/Locations,%20Transports%20and%20Stops.htm) for more information.
 */
@ApiModel(description = "A transport is the order to transport goods, that is, to pick them up at one location and deliver them to another location.  See [here](./Concepts/Locations,%20Transports%20and%20Stops.htm) for more information.")
@JsonPropertyOrder({
  Transport.JSON_PROPERTY_ID,
  Transport.JSON_PROPERTY_QUANTITIES,
  Transport.JSON_PROPERTY_PICKUP_LOCATION_ID,
  Transport.JSON_PROPERTY_PICKUP_SERVICE_TIME,
  Transport.JSON_PROPERTY_DELIVERY_LOCATION_ID,
  Transport.JSON_PROPERTY_DELIVERY_SERVICE_TIME,
  Transport.JSON_PROPERTY_REQUIRED_EQUIPMENT,
  Transport.JSON_PROPERTY_PRIORITY,
  Transport.JSON_PROPERTY_LOAD_CATEGORY
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-16T11:56:46.561+02:00[Europe/Berlin]")
public class Transport {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_QUANTITIES = "quantities";
  private List<Integer> quantities = null;

  public static final String JSON_PROPERTY_PICKUP_LOCATION_ID = "pickupLocationId";
  private String pickupLocationId;

  public static final String JSON_PROPERTY_PICKUP_SERVICE_TIME = "pickupServiceTime";
  private Integer pickupServiceTime = 0;

  public static final String JSON_PROPERTY_DELIVERY_LOCATION_ID = "deliveryLocationId";
  private String deliveryLocationId;

  public static final String JSON_PROPERTY_DELIVERY_SERVICE_TIME = "deliveryServiceTime";
  private Integer deliveryServiceTime = 0;

  public static final String JSON_PROPERTY_REQUIRED_EQUIPMENT = "requiredEquipment";
  private List<String> requiredEquipment = null;

  public static final String JSON_PROPERTY_PRIORITY = "priority";
  private JsonNullable<Integer> priority = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_LOAD_CATEGORY = "loadCategory";
  private String loadCategory;

  public Transport() { 
  }

  public Transport id(String id) {
    this.id = id;
    return this;
  }

   /**
   * A unique ID across all transports.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A unique ID across all transports.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }


  public Transport quantities(List<Integer> quantities) {
    this.quantities = quantities;
    return this;
  }

  public Transport addQuantitiesItem(Integer quantitiesItem) {
    if (this.quantities == null) {
      this.quantities = new ArrayList<>();
    }
    this.quantities.add(quantitiesItem);
    return this;
  }

   /**
   * A list of quantity dimensions of goods that have to be transported from pickup location to delivery location. The maximum length of this list is 100. That is, up to 100 different quantity dimensions (e.g. number of pallets, weight, volume, etc.) can be distinguished. Transports can only be executed by a vehicle with a higher (or an equal) maximum capacity in every quantity dimension. The length of this list has to be the same for all transports and all capacities of all vehicles. If and only if this list of quantities is empty for all transports, the capacities of each vehicle must be empty.
   * @return quantities
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of quantity dimensions of goods that have to be transported from pickup location to delivery location. The maximum length of this list is 100. That is, up to 100 different quantity dimensions (e.g. number of pallets, weight, volume, etc.) can be distinguished. Transports can only be executed by a vehicle with a higher (or an equal) maximum capacity in every quantity dimension. The length of this list has to be the same for all transports and all capacities of all vehicles. If and only if this list of quantities is empty for all transports, the capacities of each vehicle must be empty.")
  @JsonProperty(JSON_PROPERTY_QUANTITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Integer> getQuantities() {
    return quantities;
  }


  @JsonProperty(JSON_PROPERTY_QUANTITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuantities(List<Integer> quantities) {
    this.quantities = quantities;
  }


  public Transport pickupLocationId(String pickupLocationId) {
    this.pickupLocationId = pickupLocationId;
    return this;
  }

   /**
   * The ID of the location where goods have to be picked up.
   * @return pickupLocationId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the location where goods have to be picked up.")
  @JsonProperty(JSON_PROPERTY_PICKUP_LOCATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPickupLocationId() {
    return pickupLocationId;
  }


  @JsonProperty(JSON_PROPERTY_PICKUP_LOCATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPickupLocationId(String pickupLocationId) {
    this.pickupLocationId = pickupLocationId;
  }


  public Transport pickupServiceTime(Integer pickupServiceTime) {
    this.pickupServiceTime = pickupServiceTime;
    return this;
  }

   /**
   * The service time [s] that is required to pick up the transport goods at the pickup location.
   * minimum: 0
   * @return pickupServiceTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The service time [s] that is required to pick up the transport goods at the pickup location.")
  @JsonProperty(JSON_PROPERTY_PICKUP_SERVICE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPickupServiceTime() {
    return pickupServiceTime;
  }


  @JsonProperty(JSON_PROPERTY_PICKUP_SERVICE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPickupServiceTime(Integer pickupServiceTime) {
    this.pickupServiceTime = pickupServiceTime;
  }


  public Transport deliveryLocationId(String deliveryLocationId) {
    this.deliveryLocationId = deliveryLocationId;
    return this;
  }

   /**
   * The ID of the location where goods have to be delivered to.
   * @return deliveryLocationId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the location where goods have to be delivered to.")
  @JsonProperty(JSON_PROPERTY_DELIVERY_LOCATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDeliveryLocationId() {
    return deliveryLocationId;
  }


  @JsonProperty(JSON_PROPERTY_DELIVERY_LOCATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeliveryLocationId(String deliveryLocationId) {
    this.deliveryLocationId = deliveryLocationId;
  }


  public Transport deliveryServiceTime(Integer deliveryServiceTime) {
    this.deliveryServiceTime = deliveryServiceTime;
    return this;
  }

   /**
   * The service time [s] that is required to deliver the transport goods at the delivery location.
   * minimum: 0
   * @return deliveryServiceTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The service time [s] that is required to deliver the transport goods at the delivery location.")
  @JsonProperty(JSON_PROPERTY_DELIVERY_SERVICE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDeliveryServiceTime() {
    return deliveryServiceTime;
  }


  @JsonProperty(JSON_PROPERTY_DELIVERY_SERVICE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeliveryServiceTime(Integer deliveryServiceTime) {
    this.deliveryServiceTime = deliveryServiceTime;
  }


  public Transport requiredEquipment(List<String> requiredEquipment) {
    this.requiredEquipment = requiredEquipment;
    return this;
  }

  public Transport addRequiredEquipmentItem(String requiredEquipmentItem) {
    if (this.requiredEquipment == null) {
      this.requiredEquipment = new ArrayList<>();
    }
    this.requiredEquipment.add(requiredEquipmentItem);
    return this;
  }

   /**
   * A list of required vehicle equipment. If empty, no equipment is required. A vehicle can only be assigned to the transport if this list is a subset of (or equal to) the vehicle&#39;s equipment.
   * @return requiredEquipment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of required vehicle equipment. If empty, no equipment is required. A vehicle can only be assigned to the transport if this list is a subset of (or equal to) the vehicle's equipment.")
  @JsonProperty(JSON_PROPERTY_REQUIRED_EQUIPMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getRequiredEquipment() {
    return requiredEquipment;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRED_EQUIPMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequiredEquipment(List<String> requiredEquipment) {
    this.requiredEquipment = requiredEquipment;
  }


  public Transport priority(Integer priority) {
    this.priority = JsonNullable.<Integer>of(priority);
    return this;
  }

   /**
   * The priority of this transport. 0 is the lowest priority, 9 the highest. This field is only considered during the optimization if considerTransportPriorities is set. In this case every transport must have a priority set otherwise an exception is thrown. If considerTransportPriorities is set to false either every or no transport may have a priority set.  See [here](./Concepts/Transport%20Priorities.htm) for more information.
   * minimum: 0
   * maximum: 9
   * @return priority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The priority of this transport. 0 is the lowest priority, 9 the highest. This field is only considered during the optimization if considerTransportPriorities is set. In this case every transport must have a priority set otherwise an exception is thrown. If considerTransportPriorities is set to false either every or no transport may have a priority set.  See [here](./Concepts/Transport%20Priorities.htm) for more information.")
  @JsonIgnore

  public Integer getPriority() {
        return priority.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRIORITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getPriority_JsonNullable() {
    return priority;
  }
  
  @JsonProperty(JSON_PROPERTY_PRIORITY)
  public void setPriority_JsonNullable(JsonNullable<Integer> priority) {
    this.priority = priority;
  }

  public void setPriority(Integer priority) {
    this.priority = JsonNullable.<Integer>of(priority);
  }


  public Transport loadCategory(String loadCategory) {
    this.loadCategory = loadCategory;
    return this;
  }

   /**
   * The load category of this transport. To specify a load category is useful if there are transports with one load category that shall not be mixed with transports with another load category on one trip. If two load categories are mutually exclusive on a trip, this can be specified as a mixed loading prohibition. Transports with conflicting load categories will not be planned together on one trip.  See [here](./Concepts/Mixed%20Loading%20Prohibitions.htm) for more information.
   * @return loadCategory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The load category of this transport. To specify a load category is useful if there are transports with one load category that shall not be mixed with transports with another load category on one trip. If two load categories are mutually exclusive on a trip, this can be specified as a mixed loading prohibition. Transports with conflicting load categories will not be planned together on one trip.  See [here](./Concepts/Mixed%20Loading%20Prohibitions.htm) for more information.")
  @JsonProperty(JSON_PROPERTY_LOAD_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLoadCategory() {
    return loadCategory;
  }


  @JsonProperty(JSON_PROPERTY_LOAD_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoadCategory(String loadCategory) {
    this.loadCategory = loadCategory;
  }


  /**
   * Return true if this Transport object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transport transport = (Transport) o;
    return Objects.equals(this.id, transport.id) &&
        Objects.equals(this.quantities, transport.quantities) &&
        Objects.equals(this.pickupLocationId, transport.pickupLocationId) &&
        Objects.equals(this.pickupServiceTime, transport.pickupServiceTime) &&
        Objects.equals(this.deliveryLocationId, transport.deliveryLocationId) &&
        Objects.equals(this.deliveryServiceTime, transport.deliveryServiceTime) &&
        Objects.equals(this.requiredEquipment, transport.requiredEquipment) &&
        equalsNullable(this.priority, transport.priority) &&
        Objects.equals(this.loadCategory, transport.loadCategory);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, quantities, pickupLocationId, pickupServiceTime, deliveryLocationId, deliveryServiceTime, requiredEquipment, hashCodeNullable(priority), loadCategory);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transport {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    quantities: ").append(toIndentedString(quantities)).append("\n");
    sb.append("    pickupLocationId: ").append(toIndentedString(pickupLocationId)).append("\n");
    sb.append("    pickupServiceTime: ").append(toIndentedString(pickupServiceTime)).append("\n");
    sb.append("    deliveryLocationId: ").append(toIndentedString(deliveryLocationId)).append("\n");
    sb.append("    deliveryServiceTime: ").append(toIndentedString(deliveryServiceTime)).append("\n");
    sb.append("    requiredEquipment: ").append(toIndentedString(requiredEquipment)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    loadCategory: ").append(toIndentedString(loadCategory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

